apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  namespace: {{ .Values.namespace }}
data:
  LS_JAVA_OPTS: -Xmx256m -Xms256m
  logstash.conf: |
    input {
      file {
        type => "java"
        path => "/var/lib/docker/logstash/logs/service-discovery.log"
        codec => multiline {
          pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*"
          negate => "true"
          what => "previous"
        }
      }
    }

    input {
      file {
        type => "java"
        path => "/var/lib/docker/logstash/logs/spring-cloud-gateway.log"
        start_position => "end"
        codec => multiline {
          pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*"
          negate => "true"
          what => "previous"
        }
      }
    }

    input {

      file {
        type => "java"
        path => "/var/lib/docker/logstash/logs/resource-service.log"
        start_position => beginning
        codec => multiline {
          pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*"
          negate => "true"
          what => "previous"
        }
      }
    }

    input {

      file {
        type => "java"
        path => "/var/lib/docker/logstash/logs/resource-processor.log"
        start_position => beginning
        codec => multiline {
          pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*"
          negate => "true"
          what => "previous"
        }
      }
    }

    input {
      file {
        type => "java"
        path => "/var/lib/docker/logstash/logs/song-service.log"
        start_position => beginning
        codec => multiline {
          pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*"
          negate => "true"
          what => "previous"
        }
      }
    }

    input {
      file {
        type => "java"
        path => "/var/lib/docker/logstash/logs/service-discovery.log"
        start_position => "end"
        codec => multiline {
          pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*"
          negate => "true"
          what => "previous"
        }
      }
    }

    input {
      file {
        type => "java"
        path => "/var/lib/docker/logstash/logs/spring-cloud-gateway.log"
        start_position => beginning
        codec => multiline {
          pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*"
          negate => "true"
          what => "previous"
        }
      }
    }

    input {
      file {
        type => "java"
        path => "/var/lib/docker/logstash/logs/service-configuration.log"
        start_position => beginning
        codec => multiline {
          pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*"
          negate => "true"
          what => "previous"
        }
      }
    }

    input {
      file {
        type => "java"
        path => "/var/lib/docker/logstash/logs/storage-service.log"
        start_position => end
        codec => multiline {
          pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*"
          negate => "true"
          what => "previous"
        }
      }
    }


    filter {
      #If log line contains tab character followed by 'at' then we will tag that entry as stacktrace
      if [message] =~ "\tat" {
        grok {
          match => ["message", "^(\tat)"]
          add_tag => ["stacktrace"]
        }
      }

     grok {
        match => [ "message",
                   "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} \[(?<application>\w+(?:-\w+)*),(?<traceId>\w+(?:-\w+)*),(?<spanId>\w+(?:-\w+)*)\] %{NUMBER:pid} --- \[(?<thread>[A-Za-z0-9-]+)\] [A-Za-z0-9.]*\.(?<class>[A-Za-z0-9#_]+)\s*:\s+(?<logmessage>.*)",
                   "message",
                   "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} \[(?<application>\w+(?:-\w+)*),(?<traceId>\w+(?:-\w+)*),(?<spanId>\w+(?:-\w+)*)\] %{NUMBER:pid} --- .+? :\s+(?<logmessage>.*)",
                   "message",
                   "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} \[(?<application>\w+(?:-\w+)*),,\] %{NUMBER:pid} --- .+? :\s+(?<logmessage>.*)"
                 ]
       }


      date {
        match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss.SSS" ]
      }
    }

    output {

      stdout {
        codec => rubydebug
      }

      # Sending properly parsed log events to elasticsearch
      elasticsearch {
        hosts => ["elasticsearch:9200"]
      }
    }
